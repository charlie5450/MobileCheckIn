@page
@model SeatsModel
@{
    ViewData["Title"] = "좌석 선택";

    var expireTime = ViewData["ExpireTime"] as DateTime?;
    var expireTimeJs = expireTime.HasValue ? expireTime.Value.ToString("o") : "";
}

<div class="status-banner">
    <div>
        선택된 좌석: <strong id="selected-seat-text">@Model.SelectedSeat</strong>
    </div>
    <div>
        남은 시간: <strong id="time-text">--:--</strong>
    </div>
</div>

<form method="post" class="seat-form">
    <input type="hidden" name="SelectedSeat" id="SelectedSeat" value="@Model.SelectedSeat" />

    @functions {
        bool IsReserved(string seat) => Model.ReservedSeats.Contains(seat);
    }

    <div class="seat-map">
        @for (int row = 1; row <= 32; row++)
        {
            if (row == 14 || row == 15)
            {
                <div class="seat-row">
                    <span class="text-danger">비상구</span>
                </div>
            }

            if (row == 15) continue;

            if (row <= 13 || row >= 16)
            {
                <div class="seat-row">
                    <div class="seat-group">
                        @foreach (var seatLetter in new[] { "A", "B", "C" })
                        {
                            var seat = $"{row}{seatLetter}";
                            bool isReserved = IsReserved(seat);
                            string btnClass = isReserved
                            ? "btn-secondary"
                            : (Model.SelectedSeat == seat ? "btn-primary" : "btn-outline-primary");
                            string disabled = isReserved ? "disabled" : "";

                            <button type="button" class="btn @btnClass seat-btn"
                                    data-seat="@seat" @disabled>
                                @(isReserved ? "❌" : seat)
                            </button>
                        }
                    </div>
                    <div class="aisle-space"></div>
                    <div class="seat-group">
                        @foreach (var seatLetter in new[] { "D", "E", "F" })
                        {
                            var seat = $"{row}{seatLetter}";
                            bool isReserved = IsReserved(seat);
                            string btnClass = isReserved
                            ? "btn-secondary"
                            : (Model.SelectedSeat == seat ? "btn-primary" : "btn-outline-primary");
                            string disabled = isReserved ? "disabled" : "";

                            <button type="button" class="btn @btnClass seat-btn"
                                    data-seat="@seat" @disabled>
                                @(isReserved ? "❌" : seat)
                            </button>
                        }
                    </div>
                </div>
            }
        }

        <div class="toilet-block">🚻 화장실</div>
    </div>

    <div class="footer-button">
        <button type="submit" class="btn btn-success btn-block">선택 완료</button>
    </div>
</form>

@section Scripts {
    <script>
        window.scrollTo({ top: 0, behavior: 'smooth' });

        document.addEventListener("DOMContentLoaded", function () {
            const seatButtons = document.querySelectorAll("button[data-seat]");
            const selectedSeatInput = document.getElementById("SelectedSeat");
            const seatText = document.getElementById("selected-seat-text");

            seatButtons.forEach(btn => {
                btn.addEventListener("click", () => {
                    // 좌석 초기화
                    seatButtons.forEach(b => {
                        if (!b.disabled) {
                            b.classList.remove("btn-primary");
                            b.classList.add("btn-outline-primary");
                        }
                    });

                    // 선택된 버튼 강조
                    btn.classList.remove("btn-outline-primary");
                    btn.classList.add("btn-primary");

                    // hidden input 업데이트
                    const seat = btn.dataset.seat;
                    selectedSeatInput.value = seat;

                    // 상단 배너에 표시
                    seatText.textContent = seat;
                });
            });

            const expireTimeRaw = "@expireTimeJs";

            if (expireTimeRaw) {
                const expireTime = new Date(expireTimeRaw);

                function updateRemainingTime() {
                    const now = new Date();
                    const diff = expireTime - now;

                    if (diff <= 0) {
                        document.getElementById("time-text").innerText = "만료되었습니다";
                        window.location.href = "/"; // 메인으로 이동
                        return;
                    }

                    const minutes = Math.floor(diff / 60000);
                    const seconds = Math.floor((diff % 60000) / 1000);
                    document.getElementById("time-text").innerText = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                }

                updateRemainingTime();
                setInterval(updateRemainingTime, 1000);
            } else {
                document.getElementById("time-text").innerText = "시간 정보 없음";
            }
        });
    </script>
}

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #selected-seat-text {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: bold;
        font-size: 1.2rem; /* 기존보다 살짝 키움 */
    }

    #time-text {
        background-color: #fff3cd;
        color: #856404;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: bold;
        font-size: 1.2rem; /* 기존보다 살짝 키움 */
    }

    .status-banner {
        position: sticky;
        top: 0;
        z-index: 999;
        background-color: #f1f1f1;
        border-bottom: 1px solid #ccc;
        padding: 0.5rem 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.9rem;
    }

    .seat-map {
        max-height: calc(100vh - 180px);
        overflow-y: auto;
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .seat-row {
        display: flex;
        justify-content: center;
        margin-bottom: 8px;
    }

    .seat-group {
        display: flex;
        gap: 8px;
    }

    .aisle-space {
        width: 40px;
    }

    .toilet-block {
        width: 100%;
        text-align: center;
        font-size: 0.9rem;
        padding: 6px;
        background-color: #dee2e6;
        border-radius: 6px;
        margin-top: 1rem;
    }

    .seat-btn {
        width: 48px;
        height: 48px;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
    }


    .footer-button {
        padding: 1rem;
        text-align: center;
        border-top: 1px solid #ddd;
        background-color: #fff;
        position: sticky;
        bottom: 0;
        z-index: 998;
    }

    .btn-block {
        width: 100%;
        max-width: 300px;
    }
</style>
